TITULO: Práctica 3 de Algoritmos

GRUPO: 3.2
FECHA: 7/11/2022
***********************************************************

La práctica fue llevada a cabo con este equipo:

Máquina: ROG Strix G512LV-HN221
CPU:     Intel® Core™ i7-10870H CPU @ 2.20GHz × 16
RAM:     16,0 GiB @3200MHz
OS:      LINUX Ubuntu 22.04.1 LTS
Kernel:  5.15.0-47-generic


Los tiempos han sido tomados en microsegundos (μs).

El asterico (*) situado a la izquierda de algunos valores determina
que su tiempo de ejecución medido es menor que 500μs, por lo que se repite
en bucle 100 veces y se halla la media aritmetica del tiempo medido.

En concreto, para la inserción, hallaremos la diferencia de tiempos entre
100 inicializaciones y eliminaciones del arbol de n elementos, y la eliminación
de un arbol en el que se han insertado 100*n elementos

Se pide estudiar la complejidad computacional de las operaciones inserción y búsqueda
en árboles binarios de búsqueda de números enteros (en los que se considerará un campo
con la frecuencia de aparición de cada elemento)

Para ello, inicialmente procedemos a implementar las funciones correspondientes, tal y
como indica el enunciado de la práctica.
Una vez estas están implementadas, deberemos validar el funcionamiento de las mismas.
Nosotros hemos implementado una funcion para este fin, cuya salida es la siguiente:

----------------------------------------------------------------
arbol vacio: ()
altura del arbol: -1
inserto un 3
inserto un 1
inserto un 2
inserto un 5
inserto un 4
inserto un 5
( 1 ( 2 )) 3 (( 4 ) 5 ).
altura del arbol: 2
busco 1 -> repetido 1 veces
busco 2 -> repetido 1 veces
busco 3 -> repetido 1 veces
busco 4 -> repetido 1 veces
busco 5 -> repetido 2 veces
busco 6 -> repetido 0 veces
borro todos los nodos liberando la memoria:
arbol vacio: ().
altura del arbol: -1
----------------------------------------------------------------

Con esto, el funcionamiento general de las funciones queda probado, tal y como indica
el apartado 2 del enunciado. En concreto, para probar el correcto funcionamiento de la
funcion "eliminararbol()", hemos ejecutado el código (entero) con valgrind (con el 
parámetro --leak-check=full) y no se han detectado "fugas" de memoria

Ahora, procederemos con el análisis de los resultados obtenidos de la ejecución de las
funciones de búsqueda e inserción de n elementos:
Cabe mencionar que, en el caso de búsqueda, el árbol no podrá estar vacío (tendrá n elem),
al contrario que inserción, en el cual deberá estarlo obligatoriamente.

----------------------------------------------------------------
	     n		t_ins(n)	t_bus(n)
	  8000          1406.000         977.000
	 16000          3398.000        2181.000
	 32000          8167.000        5067.000
	 64000         19874.000       14108.000
	128000         42744.000       30004.000
	256000        102361.000       68604.000
	512000        222247.000      161024.000
----------------------------------------------------------------

En la tabla superior, podemos comparar los tiempos que le lleva a cada una de las operaciones
solicitadas, procesar (insertar/buscar). Por lo general, parece ser que la operación de búsqueda
se ejecuta más rápidamente que la operación de inserción. Esto puede deberse a que, aunque el caso
de inserción seguiría un proceso semejante al de búsqueda para determinar la posición en la que
debería ser insertado el elemento (en el de búsqueda sería para determinar la posición donde se
encuentra dicho elemento), la inserción del elemento en sí mismo, es decir, la creación del nodo,
(en el caso de que el valor no se encuentre ya en el árbol), conlleva más tiempo.

Para aquellos valores que no se encuentren en el árbol, al igual que en la operación de búsqueda,
esta deberá recorrer una rama en su totalidad para determinar la posición que le correspondería al 
elemento (en el caso de búsqueda sería para determinar que, efectivamente, el elemento no se 
encuentra en el árbol).

----------------------------------------------------------------
Inserción de n elementos
	n		t(n)	      t(n)/n^1.06	   t(n)/n^1.23	      t(n)/n^1.4      t(n)/nlog(n)
      8000          1406.000           0.1024967             0.0222426         0.0048268         0.0195556
     16000          3398.000           0.1188109             0.0229169         0.0044203         0.0219388
     32000          8167.000           0.1369631             0.0234816         0.0040258         0.0246030
     64000         19874.000           0.1598581             0.0243604         0.0037122         0.0280601
    128000         42744.000           0.1649045             0.0223361         0.0030254         0.0283966
    256000        102361.000           0.1894088             0.0228034         0.0027454         0.0321087
    512000        222247.000           0.1972467             0.0211074         0.0022587         0.0330194
							     cte=0.022

Cota subestimada: n^1.06
Cota ajustada: n^1.23
Cota sobreestimada: n^1.4

Conclusión: t(n) = O(n)

----------------------------------------------------------------
Búsqueda de n elementos
	n		t(n)	      t(n)/n^0.98	   t(n)/n^1.23	      t(n)/n^1.4      t(n)/nlog(n)
      8000           977.000           0.1461727             0.0154559         0.0033540         0.0135888
     16000          2181.000           0.1654315             0.0147092         0.0028372         0.0140814
     32000          5067.000           0.1948516             0.0145686         0.0024977         0.0152643
     64000         14108.000           0.2750484             0.0172928         0.0026352         0.0199191
    128000         30004.000           0.2965606             0.0156787         0.0021237         0.0199329
    256000         68604.000           0.3437750             0.0152832         0.0018400         0.0215198
    512000        161024.000           0.4090779             0.0152929         0.0016365         0.0239235
							     cte=0.015

Cota subestimada: n^0.98
Cota ajustada: n^1.23
Cota sobreestimada: n^1.4

Conclusión: t(n) = O(n^1.23)

----------------------------------------------------------------

En las tablas, hemos representado también una columna para n*log(n), pues sería la cota teórica de las
operaciones a estudiar (siendo el coste computacional de cada inserción/búsqueda de orden log(n) y estas
operaciones repetirse sobre n elementos)

Cabe mencionar también, que es bastante frecuente la existencia de valores atípicos, especialmente en las
primeras iteraciones de búsqueda/inserción (n=8000...)

En conclusión, estas operaciones, tal y como se ha mencionado anteriormente, tienen un comportamiento muy
similar en cuanto a la determinación del elemento a operar: una recorre el arbol en busca de la posición
donde insertar el elemento, y otra lo recorre en busca de un elemento determinado.

Teniendo eso en cuenta, la complejidad de ambas operaciones es prácticamente la misma, dependiendo principalmente
de la altura del arbol sobre el que se aplican. En el peor caso, ambas tendrán complejidad (teórica) O(n) (en lugar
de O(log n) como en el caso de que las claves se hayan insertado de forma aleatoria), con lo que, al aplicar las
operaciones sobre n elementos, nos quedará una complejidad (teórica) de O(n^2); en ese caso concreto, el árbol tomaría
forma de lista, teniendo cada nodo un único hijo.
